<?php

/**
 * Implements hook_help.
 *
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
function system_status_help($path, $arg) {
	switch ($path) {
		case "admin/help#system_status" :
			return '<p>' . t("A module that provides the functionality to remote check on the health of your site and modules.") . '</p>';
			break;
	}
}

/**
 * Implements hook_menu().
 */
function system_status_menu() {
	$items = array();

	$items['system/status'] = array('page callback' => 'system_status_status_page', 'access callback' => TRUE );
	$items['admin/config/system/system_status'] = array('title' => 'System Status', 'description' => 'Configuration for System status module', 'page callback' => 'drupal_get_form', 'page arguments' => array('system_status_form'), 'access arguments' => array('access administration pages'), 'type' => MENU_NORMAL_ITEM, );

	return $items;
}

/**
 * Page callback: System settings settings
 *
 * @see system_status_menu()
 */
function system_status_form($form, &$form_state) {
	$form['form_service_allow_drupalstatus'] = array('#description'=> t('Allow calls from the servers at http://www.drupalstatus.org and all of their ip ranges.'),'#type' => 'checkbox', '#title' => t('Allow calls from DrupalStatus.org') ,'#default_value' => variable_get('form_service_allow_drupalstatus','0') , );
	$form['form_public_allow_public'] = array('#description'=> t('Allow calls from ip-adresses as defined below. Please note that they should be comma separated.'),'#type' => 'checkbox', '#title' => t('Allow public calls') ,'#default_value' => variable_get('form_public_allow_public','0'),);
	$form['form_public_allow_cidr'] = array('#type' => 'textfield','#title' => t('Comma seperated list of CIDR noted addresses'),'#default_value' => variable_get('form_public_allow_cidr','127.0.0.1,::1'), );
	
	return system_settings_form($form);
}



function has_access() {		
	if(variable_get('form_service_allow_drupalstatus',0) == 1) {
		// For services ranges can be used ..
		if(match_cidr(ip_address(), "91.212.186.0/24"))
			return true;
	}
	
	if(variable_get('form_public_allow_public',0) == 1) {
		// I took the easy way out here since i didn't want to bother writing something to match v6 subnets 
		$allowed_ips = explode(',', variable_get('form_public_allow_cidr','127.0.0.1,::1'));
		
		foreach($allowed_ips as &$address) {
			if(ip_address() === $address)
				return true;
		}
	}
	
	return false;	
}

/*
 * Function to check if an IP adress matches a CIDR range .. 
 * match_cidr("192.168.0.1","192.168.0.0/16");
 */
function match_cidr($ip, $range)
{
    list ($subnet, $bits) = explode('/', $range);
    $ip = ip2long($ip);
    $subnet = ip2long($subnet);
    $mask = -1 << (32 - $bits);
    $subnet &= $mask; // in case the supplied subnet wasn't correctly aligned 
    return ($ip & $mask) == $subnet;
}


function system_status_status_page() {
	
	if(!has_access())
		return MENU_ACCESS_DENIED;
	
	$system_modules = system_list('module_enabled');

	// Needless initialisation, but hey
	$res = array("core" => array(),"contrib"=> array(),"custom" => array());
	
	foreach($system_modules as $module => $moduleObj) {
		
		// sites/*/modules/custom - I guess regex and full filesystem paths would be better here. 
		if(strpos($moduleObj->filename,"/modules/custom") === 0) 
			$res['custom'][$module] = array("version" => $moduleObj->info['version']);
		
		// sites/*/modules/contrib
		if(strpos($moduleObj->filename,"/modules/contrib") === 0) 
			$res['contrib'][$module] = array("version" => $moduleObj->info['version']);
		
		// remaining .. 
		if(strpos($moduleObj->filename,"modules/") === 0) 
			$res['core'][$module] = array("version" => $moduleObj->info['version']);
		
	}

	// pretty sure this is not the way to return the data ... how should i do this without rendering a template ?
	echo json_encode(array("system_status" => $res));
}
