<?php
/**
 * @file
 * Drupal system status
 */

/**
 * Implements hook_help().
 *
 * Displays help and module information.
 */
function system_status_help($path, $arg) {
  switch ($path) {
    case 'admin/help#system_status':
      return '<p>' . t("A module that provides the functionality to remote check on the health of your site and modules.") . '</p>';

    break;
  }
}

/**
 * Implements hook_menu().
 */
function system_status_menu() {
  $items = array();

  $items['admin/reports/system_status'] = array(
    'title' => 'System Status',
    'description' => 'Output of the System status module',
    'access callback' => 'system_status_access_callback',
    'page callback' => 'system_status_status_page',
    'file' => 'system_status_status_page.inc',
  );

  $items['admin/config/system/system_status'] = array(
    'title' => 'System Status',
    'description' => 'Configuration for System status module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('system_status_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Page callback: System settings settings.
 *
 * @see system_status_menu()
 */
function system_status_form($form, &$form_state) {

  $form['system_status_public_allow_public'] = array(
    '#description' => t('Allow calls from ip-adresses as defined below. Please note that they should be comma separated.'),
    '#type' => 'checkbox',
    '#title' => t('Allow public calls'),
    '#default_value' => variable_get('system_status_public_allow_public', '1'),
  );

  $form['system_status_public_allow_ips'] = array(
    '#type' => 'textfield',
    '#title' => t('Comma seperated list of allowed IP addresses'),
    '#default_value' => variable_get('system_status_public_allow_ips', '127.0.0.1,::1'),
    '#states' => array(
      'visible' => array(
        ':input[name="system_status_public_allow_public"]' => array('checked' => TRUE),
      ),
    ),
  );

  $form['system_status_service_allow_drupalstatus'] = array(
    '#description' => t('Allow calls from the servers at http://www.drupalstatus.org and all of their ip ranges.'),
    '#type' => 'checkbox',
    '#title' => t('Allow calls from DrupalStatus.org'),
    '#default_value' => variable_get('system_status_service_allow_drupalstatus', '0'),
  );

  $form['system_status_do_match_core'] = array(
    '#description' => t('Scan for core modules.'),
    '#type' => 'checkbox',
    '#title' => t('Enable core modules'),
    '#default_value' => variable_get('system_status_do_match_core', '1'),
  );

  $form['system_status_do_match_contrib'] = array(
    '#description' => t('Scan for contrib modules.'),
    '#type' => 'checkbox',
    '#title' => t('Enable contrib modules'),
    '#default_value' => variable_get('system_status_do_match_contrib', '1'),
  );

  $form['system_status_match_contrib_mode'] = array(
    '#type' => 'radios',
    '#title' => t('Where are your contrib modules stored ?'),
    '#default_value' => variable_get('system_status_match_contrib_mode', 0),
    '#options' => array(
      0 => 'sites/*/modules/',
      1 => 'sites/*/modules/contrib/',
      2 => 'Other'),
    '#states' => array(
      'visible' => array(
        ':input[name="system_status_do_match_contrib"]' => array('checked' => TRUE),
      ),
    ),
  );

  $form['system_status_preg_match_contrib'] = array(
    '#type' => 'textfield',
    '#title' => t('Regular expression to match contrib modules'),
    '#default_value' => variable_get('system_status_preg_match_contrib', '{^sites\/([A-z,\.,\-]+)\/modules\/contrib\/*}'),
    '#states' => array(
      'visible' => array(
        ':input[name="system_status_match_contrib_mode"]' => array('value' => 2),
      ),
    ),
  );

  $form['system_status_do_match_custom'] = array(
    '#description' => t('Scan for custom modules using a regular expression.'),
    '#type' => 'checkbox',
    '#title' => t('Enable custom modules'),
    '#default_value' => variable_get('system_status_do_match_custom', '0'),
    '#states' => array(
      'visible' => array(
        ':input[name="system_status_match_contrib_mode"]' => array('value' => 2),
      ),
    ),
  );

  $form['system_status_preg_match_custom'] = array(
    '#type' => 'textfield',
    '#title' => t('Regular expression to match custom modules'),
    '#default_value' => variable_get('system_status_preg_match_custom', '{^sites\/([A-z,\.,\-]+)\/modules\/custom\/*}'),
    '#states' => array(
      'visible' => array(
        ':input[name="system_status_do_match_custom"]' => array('visible' => TRUE),
      ),
    ),
  );

  return system_settings_form($form);
}


/**
 * Access callback: Check ip.
 * 
 * @see system_status_menu()
 */
function system_status_access_callback() {
  $ip_address = ip_address();

  if (variable_get('system_status_service_allow_drupalstatus', 0) == 1) {
    // For services ranges can be used ..
    if (system_status_match_cidr($ip_address, "91.212.186.0/24")) {
      return TRUE;
    }
  }

  if (variable_get('system_status_public_allow_public', 1) == 1) {
    // I took the easy way out here since i didn't want
    // to bother writing something to match v6 subnets.
    $allowed_ips = explode(',', variable_get('system_status_public_allow_ips', '127.0.0.1,::1'));

    foreach ($allowed_ips as &$address) {
      if ($ip_address === $address) {
        return TRUE;
      }
    }
  }

  return FALSE;
}

/**
 * Check if an IP adress matches a CIDR range.
 * @example
 * match_cidr("192.168.0.1","192.168.0.0/16");
 */
function system_status_match_cidr($ip_address, $range) {
  list ($subnet, $bits) = explode('/', $range);
  $ip_address = ip2long($ip_address);
  $subnet = ip2long($subnet);
  $mask = -1 << (32 - $bits);
  // In case the supplied subnet wasn't correctly aligned.
  $subnet &= $mask;
  return ($ip_address & $mask) == $subnet;
}
